Qt JRuby
========

When the most powerful GUI toolkit meets the most flexible language to create a wonderful DSL to build cross-platform applications easily.

Qt::JRuby is a kick ass GUI toolkit in JRuby based on Qt Jambi. 

Download
========

You can grab the jar here : http://qtjruby.googlecode.com/files/qtjruby-1.0.1.jar

To install Qt::JRuby from sources you'll need Git to download them :

	git clone git://github.com/nmerouze/qtjruby.git

If you don't have Git installed, you can download the tarball : http://github.com/nmerouze/qtjruby/tarball/master

Install from jar
================

* Download JRuby Complete 1.1
* Download Qt Jambi 4.4 Preview for your platform (just for qtjambi-$VERSION.jar and qtjambi-$PLATFORM-$VERSION.jar)
* Put these jar in the same directory than the Qt::JRuby jar

You can now begin to write your application. To launch it type :

	java -jar /path/to/qtjruby-1.0.1.jar myapplication.rb

Note : JRuby Complete 1.1 is not available yet so download JRuby Complete 1.1RC3 and rename it to jruby-complete-1.1.jar

Note 2 : Links are at the bottom of the file.

Install from sources
====================

Download and install JRuby. Then set JRUBY_HOME :

	export JRUBY_HOME=/path/to/jruby
	
Update PATH with JRUBY_HOME/bin :

	export PATH=$JRUBY_HOME/bin:$PATH

Download Qt Jambi. Put qtjambi-$VERSION.jar and qtjambi-$PLATFORM-$VERSION.jar into JRUBY_HOME/lib folder.

Finally build Qt::JRuby jar :

	jruby -S rake build:qtjruby

Examples
========

You can run the examples with the following command :

	jruby examples/example1.rb
	
You must add -J-XstartOnFirstThread option if you are under Mac OS X.

First Steps
===========

You must require "qt" to use it in your application :

	require 'qt'

Then you can create your application :

	Qt.app do
		window :main do
			...
		end
	end

Note that Qt.app opens automatically the window which has the name :main on startup.

The examples are a very good way to see what you can do.

Old fashioned way
=================

But you can make GUI interfaces without the DSL. Every Qt objects can be invoked with the namespace Qt :

	QApplication => Qt::Application
	QPushButton => Qt::PushButton

Deployment
==========

Coming soon...

Compatibility
=============

Qt::JRuby has been tested on JRuby 1.1 and Qt Jambi 4.4 Preview but may run with other versions.

Thanks
======

Qt Jambi Jython brings the solution to the Signals problems.

The DSL is largely inspired by Shoes which is a great GUI toolkit in Ruby.

Links
=====

Qt::JRuby : http://qtjruby.org
Qt::JRuby sources : http://github.com/nmerouze/qtjruby
Qt::JRuby jar : http://code.google.com/p/qtjruby/downloads/list
JRuby : http://jruby.codehaus.org/
JRuby Complete : http://repository.codehaus.org/org/jruby/jruby-complete/
Qt Jambi 4.4 Preview : http://trolltech.com/developer/downloads/qt/qtjambi44-preview-download
Qt Jambi Jython : http://labs.trolltech.com/page/Projects/QtJambi/jython
Qt Jambi Documentation : http://doc.trolltech.com
Shoes toolkit : http://code.whytheluckystiff.net/shoes/
Git : http://git.or.cz/

Licence and support
===================

(C) 2008 Nicolas MÃ©rouze, under an MIT licence. http://www.opensource.org/licenses/mit-license.php

Please leave any bugs or feedback at nicolas.merouze [at] gmail [dot] com